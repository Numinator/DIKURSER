




let loopMulTableHelper i j =
  match (i, j) with 
   | (0,_) ->  j
   | (_,0) ->  i
   | (_,_) -> j*i


let loopMulTable n =
  let mutable retString  = ""
  for i = 0 to n do
     for j = 0 to 10 do
       retString  <- retString + (sprintf "%4d" (loopMulTableHelper i j)) 
     retString <- retString + "\n"
  retString
 


let mulTable n =
 if n <= 10 then  
  let mutable table = loopMulTable 10
  table.[0..4*11*(n+1)+n]
 else
  "Du kan ikke kalde mulTable med tal over 10"

let recMulTable n =
 
 let rec rowMaker tal antal =
  if antal < 0 then "" else rowMaker tal (antal - 1) + sprintf "%4i" (tal * antal)
  //Skaber en row hvor tallet laengst til venstre desvaerre altid er 0
  //Jeg har en ide til hvordan jeg kan lose det, men har ikke tid til
  //at implementere det
  
 let rec builder = function
 | 0 -> rowMaker 1 10 + "\n"
 | n -> builder (n-1) + rowMaker n 10  + "\n"  

 builder n

let compare n =
 printfn "%2s | %5s | %5s" "n" "loop" "rec"
 for i = 1 to n do
  printfn "%2i | %5b | %5b" i (mulTable i = loopMulTable i) (mulTable i = recMulTable i)


// "%A" er ligeglad med typen og printer det hele, mens "%s" tager string
// og printer kun indeholdet af stringen, altsaa uden "" 

